apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "nomad.fullname" . }}-configmap
  labels:
    app.kubernetes.io/name: {{ include "nomad.name" . }}-configmap
    helm.sh/chart: {{ include "nomad.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  nomad.yaml: |
    meta:
      deployment: "{{ .Release.Name }}"
      service: "{{ .Values.meta.service }}"
      homepage: "{{ .Values.meta.homepage }}"
      source_url: "{{ .Values.meta.source_url }}"
      maintainer_email: "{{ .Values.meta.maintainer_email }}"
      beta:
        label: "{{ .Values.version.label }}"
        isBeta: {{ .Values.version.isBeta }}
        isTest: {{ .Values.version.isTest }}
        usesBetaData: {{ .Values.version.usesBetaData }}
        officialUrl: "{{ .Values.version.officialUrl }}"
    process:
      reuse_parser: {{ .Values.process.reuseParser }}
      index_materials: {{ .Values.process.indexMaterials }}
      rfc3161_skip_published: {{ .Values.process.rfc3161_skip_published }}
    reprocess:
      rematch_published: {{ .Values.reprocess.rematchPublished }}
      reprocess_existing_entries: {{ .Values.reprocess.reprocessExistingEntries }}
      use_original_parser: {{ .Values.reprocess.useOriginalParser }}
      add_matched_entries_to_published:  {{ .Values.reprocess.addMatchedEntriesToPublished }}
      delete_unmatched_published_entries: {{ .Values.reprocess.deleteUnmatchedPublishedEntries }}
      index_individual_entries: {{ .Values.reprocess.indexIndividualEntries }}
    fs:
      tmp: ".volumes/fs/staging/tmp"
      staging_external: {{ .Values.volumes.staging }}
      public_external: {{ .Values.volumes.public }}
      north_home_external: {{ .Values.volumes.north_home }}
      prefix_size: {{ .Values.volumes.prefixSize }}
      working_directory: /app
      {{ if .Values.volumes.archiveVersionSuffix }}
      archive_version_suffix: "{{ .Values.volumes.archiveVersionSuffix }}"
      {{ end }}
    logstash:
      enabled: {{ .Values.logstash.enabled }}
      host: "{{ .Values.logstash.host }}"
      tcp_port: {{ .Values.logstash.port }}
    services:
      api_host: "{{ .Values.proxy.external.host }}"
      api_port: {{ .Values.proxy.external.port }}
      api_base_path: "{{ .Values.proxy.external.path }}"
      api_secret: "{{ .Values.api.secret }}"
      https: {{ .Values.proxy.external.https }}
      upload_limit: {{ .Values.api.uploadLimit }}
      admin_user_id: {{ .Values.keycloak.admin_user_id }}
      aitoolkit_enabled: {{ .Values.services.aitoolkit.enabled }}
    rabbitmq:
      host: "{{ .Release.Name }}-rabbitmq"
    elastic:
      host: {{ .Values.elastic.masterService }}
      port: {{ .Values.elastic.httpPort }}
      timeout: {{ .Values.elastic.timeout }}
      bulk_timeout: {{ .Values.elastic.bulkTimeout }}
      bulk_size: {{ .Values.elastic.bulkSize }}
      entries_per_material_cap: {{ .Values.elastic.entriesPerMaterialCap }}
      {{ if .Values.elastic.dbname }}
      entries_index: "{{ .Values.elastic.dbname }}_entries_v1"
      materials_index: "{{ .Values.elastic.dbname }}_materials_v1"
      {{ else }}
      entries_index: "{{ .Values.dbname }}_entries_v1"
      materials_index: "{{ .Values.dbname }}_materials_v1"
      {{ end }}
    mongo:
      host: "{{ .Release.Name }}-mongo"
      # port: {{ .Values.mongo.port }} # does not work, port is set in ENV variable
      db_name: "{{ .Values.dbname }}"
    mail:
      enabled: {{ .Values.mail.enabled }}
      host: "{{ .Values.mail.host }}"
      {{ if .Values.mail.port }}
      port: {{ .Values.mail.port }}
      {{ end }}
      {{ if .Values.mail.user }}
      user: "{{ .Values.mail.user }}"
      {{ end }}
      {{ if .Values.mail.password }}
      password: "{{ .Values.mail.password }}"
      {{ end }}
      from_address: "{{ .Values.mail.from }}"
      {{ if .Values.mail.cc_adress }}
      cc_address: "{{ .Values.mail.cc_adress }}"
      {{ else }}
      cc_address: null
      {{ end }}
    celery:
      routing: "{{ .Values.worker.routing }}"
      timeout: {{ .Values.worker.timeout }}
      acks_late: {{ .Values.worker.acks_late }}
    client:
      user: "{{ .Values.client.username }}"
    oasis:
      is_oasis: true
      uses_central_user_management: true
    # keycloak:
    #   server_url: "{{ .Values.keycloak.serverUrl }}"
    #   realm_name: "{{ .Values.keycloak.realmName }}"
    #   username: "{{ .Values.keycloak.username }}"
    #   client_id: "{{ .Values.keycloak.clientId }}"
    datacite:
      enabled: {{ .Values.datacite.enabled }}
      prefix: "{{ .Values.datacite.prefix }}"
    {{ if .Values.gui.config }}
    ui: {{ .Values.gui.config | toYaml | nindent 6 }}
    {{ end }}
    north:
      enabled: {{ .Values.north.enabled }}
      hub_host: "{{ .Values.proxy.external.host }}"
      hub_port: {{ .Values.proxy.external.port }}
      hub_service_api_token: "{{ .Values.north.hubServiceApiToken }}"
    {{ if .Values.archive }}
    archive: {{ .Values.archive | toYaml | nindent 6 }}
    {{ end }}
    {{ if .Values.plugins }}
    plugins: {{ .Values.plugins | toYaml | nindent 6 }}
    {{ end }}
    {{ if .Values.normalize }}
    normalize: {{ .Values.normalize | toYaml | nindent 6 }}
    {{ end }}
